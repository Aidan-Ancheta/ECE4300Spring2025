`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 04/15/2025 10:37:35 PM
// Design Name: 
// Module Name: decode
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module decode(
    input wire clk,
    input wire rst,
    input wire wb_reg_write,
    input wire [4:0] wb_write_reg_location,
    input wire [31:0] mem_wb_write_data,
    input wire [31:0] if_id_instr,
    input wire [31:0] if_id_npc,

    output wire [1:0] id_ex_wb,
    output wire [2:0] id_ex_mem,
    output wire [3:0] id_ex_execute,
    output wire [31:0] id_ex_npc,
    output wire [31:0] id_ex_readdat1,
    output wire [31:0] id_ex_readdat2,
    output wire [31:0] id_ex_sign_ext,
    output wire [4:0] id_ex_instr_bits_20_16,
    output wire [4:0] id_ex_instr_bits_15_11
);

    // Internal wires
    wire [31:0] sign_ext_internal;
    wire [31:0] A_readdat1_internal;
    wire [31:0] B_readdat2_internal;
    wire [1:0] wb_internal;
    wire [2:0] mem_internal;
    wire [3:0] ex_internal;

    // Outputs from latch
    wire [1:0] wb_out;
    wire [2:0] mem_out;
    wire [3:0] ctl_out;
    wire [31:0] npc_out;
    wire [31:0] readdat1_out;
    wire [31:0] readdat2_out;
    wire [31:0] sign_ext_out;
    wire [4:0] instr_bits_20_16_out;
    wire [4:0] instr_bits_15_11_out;

    // Assign outputs from latch
    assign id_ex_wb = wb_out;
    assign id_ex_mem = mem_out;
    assign id_ex_execute = ctl_out;
    assign id_ex_npc = npc_out;
    assign id_ex_readdat1 = readdat1_out;
    assign id_ex_readdat2 = readdat2_out;
    assign id_ex_sign_ext = sign_ext_out;
    assign id_ex_instr_bits_20_16 = instr_bits_20_16_out;
    assign id_ex_instr_bits_15_11 = instr_bits_15_11_out;

    // Sign Extension
    signExtend sE0 (
        .immediate(if_id_instr[15:0]),
        .extended(sign_ext_internal)
    );

    // Register File
    regfile rf0 (
        .clk(clk),
        .rst(rst),
        .regwrite(wb_reg_write),
        .rs(if_id_instr[25:21]),
        .rt(if_id_instr[20:16]),
        .rd(wb_write_reg_location),
        .writedata(mem_wb_write_data),
        .A_readdat1(A_readdat1_internal),
        .B_readdat2(B_readdat2_internal)
    );

    // Control Unit
    control c0 (
        .clk(clk),
        .rst(rst),
        .opcode(if_id_instr[31:26]),
        .wb(wb_internal),
        .mem(mem_internal),
        .ex(ex_internal)
    );

    // ID/EX Latch
    idExLatch iEL0 (
        .clk(clk),
        .rst(rst),
        .ctl_wb(wb_internal),
        .ctl_mem(mem_internal),
        .ctl_ex(ex_internal),
        .npc(if_id_npc),
        .readdat1(A_readdat1_internal),
        .readdat2(B_readdat2_internal),
        .sign_ext(sign_ext_internal),
        .instr_bits_20_16(if_id_instr[20:16]),
        .instr_bits_15_11(if_id_instr[15:11]),
        .wb_out(wb_out),
        .mem_out(mem_out),
        .ctl_out(ctl_out),
        .npc_out(npc_out),
        .readdat1_out(readdat1_out),
        .readdat2_out(readdat2_out),
        .sign_ext_out(sign_ext_out),
        .instr_bits_20_16_out(instr_bits_20_16_out),
        .instr_bits_15_11_out(instr_bits_15_11_out)
    );

endmodule


